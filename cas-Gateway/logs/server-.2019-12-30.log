[2019-12-30T11:36:59.835] [INFO] normal - [login] request body
[2019-12-30T11:36:59.837] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T11:38:05.811] [INFO] normal - [login] request body { userCode: '11', password: '123456' }
[2019-12-30T11:38:05.813] [INFO] normal - [login] response data: {}
[2019-12-30T11:43:01.819] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T11:43:01.821] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T11:44:40.698] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T11:44:40.700] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T11:44:54.534] [INFO] normal - [login] request body { userCode: 'test', password: '12233' }
[2019-12-30T11:44:54.534] [INFO] normal - [login] response data: {}
[2019-12-30T11:45:33.976] [INFO] normal - [login] request body { userCode: '12233', password: '123456' }
[2019-12-30T11:45:33.978] [INFO] normal - [login] response data: {}
[2019-12-30T11:46:02.153] [INFO] normal - [login] request body { userCode: '1232', password: '123456' }
[2019-12-30T11:46:02.155] [INFO] normal - [login] response data: {}
[2019-12-30T11:46:36.523] [INFO] normal - [login] request body { userCode: '1222', password: '123456' }
[2019-12-30T11:46:36.525] [INFO] normal - [login] response data: {}
[2019-12-30T11:46:41.003] [INFO] normal - [login] request body { userCode: '1222', password: '123456' }
[2019-12-30T11:46:41.003] [INFO] normal - [login] response data: {}
[2019-12-30T11:48:19.439] [INFO] normal - [login] request body { userCode: '12222', password: '123456' }
[2019-12-30T11:48:19.439] [INFO] normal - [login] response data: {}
[2019-12-30T11:57:42.096] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T11:57:42.099] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:02:30.051] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:02:30.053] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:02:30.067] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:10:43.838] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:10:43.841] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:10:43.854] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:10:43.867] [INFO] normal - [menu] request body: { userId: '20191217', orgId: '2019001' }
[2019-12-30T13:11:44.055] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:11:44.081] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:11:51.447] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:11:51.448] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:11:51.458] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:11:51.480] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:13:35.922] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:13:35.924] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:13:35.934] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:13:35.945] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:13:52.791] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:13:52.793] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:13:52.814] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:13:52.825] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:16:24.745] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:16:24.780] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:23:55.200] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:23:55.215] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:24:18.735] [INFO] normal - [org/switch] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T13:24:18.752] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T13:25:14.301] [INFO] normal - [logout] request body: { userId: '20191217' }
[2019-12-30T13:26:15.456] [INFO] normal - [login] request body { userCode: 'test_code2302', password: '123456' }
[2019-12-30T13:26:15.456] [INFO] normal - [login] response data: { token: '2019122302_token', userId: 2019122302, orgId: null }
[2019-12-30T13:26:15.467] [INFO] normal - [user/info] request body: { userId: 2019122302 }
[2019-12-30T13:26:15.479] [INFO] normal - [menu] request body: { userId: 2019122302, orgId: null }
[2019-12-30T13:27:40.307] [INFO] normal - [logout] request body: { userId: '2019122302' }
[2019-12-30T13:27:49.874] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:27:49.875] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:27:49.885] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:27:49.904] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:31:45.626] [INFO] normal - [logout] request body: { userId: '20191217' }
[2019-12-30T13:31:48.234] [INFO] normal - [login] request body { userCode: '2222', password: '123456' }
[2019-12-30T13:31:48.235] [INFO] normal - [login] response data: {}
[2019-12-30T13:32:01.119] [INFO] normal - [login] request body { userCode: '2222222', password: '123456' }
[2019-12-30T13:32:01.119] [INFO] normal - [login] response data: {}
[2019-12-30T13:32:26.608] [INFO] normal - [login] request body { userCode: '2222222', password: '123456' }
[2019-12-30T13:32:26.610] [INFO] normal - [login] response data: {}
[2019-12-30T13:32:33.966] [INFO] normal - [login] request body { userCode: '1222', password: '123456' }
[2019-12-30T13:32:33.966] [INFO] normal - [login] response data: {}
[2019-12-30T13:33:06.962] [INFO] normal - [login] request body { userCode: '1222', password: '123456' }
[2019-12-30T13:33:06.965] [INFO] normal - [login] response data: {}
[2019-12-30T13:35:44.649] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:35:44.652] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:35:44.665] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:35:44.677] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:36:02.947] [INFO] normal - [org/switch] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T13:36:02.964] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T13:37:00.536] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:37:00.563] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T13:37:21.557] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:37:21.580] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T13:41:11.037] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:41:11.040] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:41:11.062] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:41:11.092] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:44:52.362] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:44:52.410] [INFO] normal - [menu] request header: function header(name) {
  if (!name) {
    throw new TypeError('name argument is required to req.get');
  }

  if (typeof name !== 'string') {
    throw new TypeError('name must be a string to req.get');
  }

  var lc = name.toLowerCase();

  switch (lc) {
    case 'referer':
    case 'referrer':
      return this.headers.referrer
        || this.headers.referer;
    default:
      return this.headers[lc];
  }
}
[2019-12-30T13:44:52.413] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:45:07.890] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:45:07.904] [INFO] normal - [menu] request header: { host: '127.0.0.1:3333',
  connection: 'close',
  'content-length': '35',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  accept: 'application/json',
  origin: 'http://localhost:3001',
  authorization: '20191217_token',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'content-type': 'application/json',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:45:07.905] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:47:02.441] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:47:02.465] [INFO] normal - [menu] request header: { host: '127.0.0.1:3333',
  connection: 'close',
  'content-length': '35',
  accept: 'application/json',
  origin: 'http://localhost:3001',
  authorization: '20191217_token',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'content-type': 'application/json',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:47:02.466] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:47:06.786] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:47:06.848] [INFO] normal - [menu] request header: { host: '127.0.0.1:3333',
  connection: 'close',
  'content-length': '35',
  accept: 'application/json',
  origin: 'http://localhost:3001',
  authorization: '20191217_token',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'content-type': 'application/json',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:47:06.880] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:47:50.505] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:47:50.523] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:50:28.403] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:50:28.430] [INFO] normal - use:  IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     paused: true,
     emitClose: true,
     autoDestroy: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  _events:
   [Object: null prototype] { end: [Function: resetHeadersTimeoutOnReqEnd] },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: false,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Function],
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 58727 },
     [Symbol(asyncId)]: 42,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5880,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43,
        [Symbol(triggerId)]: 42 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: false,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Function],
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 58727 },
     [Symbol(asyncId)]: 42,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5880,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43,
        [Symbol(triggerId)]: 42 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  httpVersionMajor: 1,
  httpVersionMinor: 0,
  httpVersion: '1.0',
  complete: false,
  headers:
   { host: '127.0.0.1:3333',
     connection: 'close',
     pragma: 'no-cache',
     'cache-control': 'no-cache',
     'access-control-request-method': 'POST',
     origin: 'http://localhost:3001',
     'user-agent':
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
     'access-control-request-headers': 'authorization,content-type',
     accept: '*/*',
     referer: 'http://localhost:3001/',
     'accept-encoding': 'gzip, deflate',
     'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' },
  rawHeaders:
   [ 'Host',
     '127.0.0.1:3333',
     'Connection',
     'close',
     'Pragma',
     'no-cache',
     'Cache-Control',
     'no-cache',
     'Access-Control-Request-Method',
     'POST',
     'Origin',
     'http://localhost:3001',
     'User-Agent',
     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
     'Access-Control-Request-Headers',
     'authorization,content-type',
     'Accept',
     '*/*',
     'Referer',
     'http://localhost:3001/',
     'Accept-Encoding',
     'gzip, deflate',
     'Accept-Language',
     'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/',
  method: 'OPTIONS',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: false,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Function],
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 58727 },
     [Symbol(asyncId)]: 42,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5880,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43,
        [Symbol(triggerId)]: 42 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '/api/menu',
  originalUrl: '/api/menu',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      [Object: null prototype] { finish: [Array], end: [Function: onevent] },
     _eventsCount: 2,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: false,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 42,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 5880,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 43,
           [Symbol(triggerId)]: 42 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 42,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 5880,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 43,
           [Symbol(triggerId)]: 42 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: [Object: null prototype] {},
     _startAt: undefined,
     _startTime: undefined,
     writeHead: [Function: writeHead],
     __onFinished: { [Function: listener] queue: [Array] },
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        'x-powered-by': [Array],
        'access-control-allow-origin': [Array],
        'access-control-allow-headers': [Array],
        'access-control-allow-methods': [Array],
        'content-type': [Array] } },
  route:
   Route {
     path: '*',
     stack:
      [ [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer] ],
     methods:
      { acl: true,
        bind: true,
        checkout: true,
        connect: true,
        copy: true,
        delete: true,
        get: true,
        head: true,
        link: true,
        lock: true,
        'm-search': true,
        merge: true,
        mkactivity: true,
        mkcalendar: true,
        mkcol: true,
        move: true,
        notify: true,
        options: true,
        patch: true,
        post: true,
        propfind: true,
        proppatch: true,
        purge: true,
        put: true,
        rebind: true,
        report: true,
        search: true,
        source: true,
        subscribe: true,
        trace: true,
        unbind: true,
        unlink: true,
        unlock: true,
        unsubscribe: true } },
  _startAt: [ 4581777, 451361800 ],
  _startTime: 2019-12-30T05:50:28.429Z,
  _remoteAddress: '::ffff:127.0.0.1',
  body: {},
  secret: undefined,
  cookies: [Object: null prototype] {},
  signedCookies: [Object: null prototype] {} } ServerResponse {
  _events:
   [Object: null prototype] {
     finish: [ [Function: bound resOnFinish], [Function: onevent] ],
     end: [Function: onevent] },
  _eventsCount: 2,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: false,
  useChunkedEncodingByDefault: false,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [IncomingMessage],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage: [Circular],
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 58727 },
     [Symbol(asyncId)]: 42,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5880,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43,
        [Symbol(triggerId)]: 42 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3333',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 7 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [IncomingMessage],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage: [Circular],
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 58727 },
     [Symbol(asyncId)]: 42,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5880,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43,
        [Symbol(triggerId)]: 42 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: true,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] { end: [Function: resetHeadersTimeoutOnReqEnd] },
     _eventsCount: 1,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 42,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 5880,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 43,
           [Symbol(triggerId)]: 42 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 42,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 5880,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 43,
           [Symbol(triggerId)]: 42 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     httpVersionMajor: 1,
     httpVersionMinor: 0,
     httpVersion: '1.0',
     complete: false,
     headers:
      { host: '127.0.0.1:3333',
        connection: 'close',
        pragma: 'no-cache',
        'cache-control': 'no-cache',
        'access-control-request-method': 'POST',
        origin: 'http://localhost:3001',
        'user-agent':
         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
        'access-control-request-headers': 'authorization,content-type',
        accept: '*/*',
        referer: 'http://localhost:3001/',
        'accept-encoding': 'gzip, deflate',
        'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' },
     rawHeaders:
      [ 'Host',
        '127.0.0.1:3333',
        'Connection',
        'close',
        'Pragma',
        'no-cache',
        'Cache-Control',
        'no-cache',
        'Access-Control-Request-Method',
        'POST',
        'Origin',
        'http://localhost:3001',
        'User-Agent',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
        'Access-Control-Request-Headers',
        'authorization,content-type',
        'Accept',
        '*/*',
        'Referer',
        'http://localhost:3001/',
        'Accept-Encoding',
        'gzip, deflate',
        'Accept-Language',
        'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '/',
     method: 'OPTIONS',
     statusCode: null,
     statusMessage: null,
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 42,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 5880,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 43,
           [Symbol(triggerId)]: 42 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _consuming: false,
     _dumped: false,
     next: [Function: next],
     baseUrl: '/api/menu',
     originalUrl: '/api/menu',
     _parsedUrl:
      Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/',
        path: '/',
        href: '/',
        _raw: '/' },
     params: {},
     query: {},
     res: [Circular],
     route: Route { path: '*', stack: [Array], methods: [Object] },
     _startAt: [ 4581777, 451361800 ],
     _startTime: 2019-12-30T05:50:28.429Z,
     _remoteAddress: '::ffff:127.0.0.1',
     body: {},
     secret: undefined,
     cookies: [Object: null prototype] {},
     signedCookies: [Object: null prototype] {} },
  locals: [Object: null prototype] {},
  _startAt: undefined,
  _startTime: undefined,
  writeHead: [Function: writeHead],
  __onFinished: { [Function: listener] queue: [ [Function: logRequest] ] },
  [Symbol(isCorked)]: false,
  [Symbol(outHeadersKey)]:
   [Object: null prototype] {
     'x-powered-by': [ 'X-Powered-By', ' 3.2.1' ],
     'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ],
     'access-control-allow-headers':
      [ 'Access-Control-Allow-Headers',
        'Origin, X-Requested-With, Content-Type, Accept, Authorization' ],
     'access-control-allow-methods': [ 'Access-Control-Allow-Methods', '*' ],
     'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ] } } function next(err) {
    var layerError = err === 'route'
      ? null
      : err;

    // remove added slash
    if (slashAdded) {
      req.url = req.url.substr(1);
      slashAdded = false;
    }

    // restore altered req.url
    if (removed.length !== 0) {
      req.baseUrl = parentUrl;
      req.url = protohost + removed + req.url.substr(protohost.length);
      removed = '';
    }

    // signal to exit router
    if (layerError === 'router') {
      setImmediate(done, null)
      return
    }

    // no more matching layers
    if (idx >= stack.length) {
      setImmediate(done, layerError);
      return;
    }

    // get pathname of request
    var path = getPathname(req);

    if (path == null) {
      return done(layerError);
    }

    // find next matching layer
    var layer;
    var match;
    var route;

    while (match !== true && idx < stack.length) {
      layer = stack[idx++];
      match = matchLayer(layer, path);
      route = layer.route;

      if (typeof match !== 'boolean') {
        // hold on to layerError
        layerError = layerError || match;
      }

      if (match !== true) {
        continue;
      }

      if (!route) {
        // process non-route handlers normally
        continue;
      }

      if (layerError) {
        // routes do not match with a pending error
        match = false;
        continue;
      }

      var method = req.method;
      var has_method = route._handles_method(method);

      // build up automatic options response
      if (!has_method && method === 'OPTIONS') {
        appendMethods(options, route._options());
      }

      // don't even bother matching route
      if (!has_method && method !== 'HEAD') {
        match = false;
        continue;
      }
    }

    // no match
    if (match !== true) {
      return done(layerError);
    }

    // store route for dispatch on change
    if (route) {
      req.route = route;
    }

    // Capture one-time layer values
    req.params = self.mergeParams
      ? mergeParams(layer.params, parentParams)
      : layer.params;
    var layerPath = layer.path;

    // this should be done for the layer
    self.process_params(layer, paramcalled, req, res, function (err) {
      if (err) {
        return next(layerError || err);
      }

      if (route) {
        return layer.handle_request(req, res, next);
      }

      trim_prefix(layer, layerError, layerPath, path);
    });
  }
[2019-12-30T13:50:55.495] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:50:55.506] [INFO] normal - use: 
[2019-12-30T13:51:11.453] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:51:11.467] [INFO] normal - use: 
[2019-12-30T13:51:11.471] [INFO] normal - use: 
[2019-12-30T13:51:11.471] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:53:26.625] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:53:42.367] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:54:00.602] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:54:00.612] [INFO] normal - authorization undefined
[2019-12-30T13:54:12.476] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:54:12.488] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  'access-control-request-method': 'POST',
  origin: 'http://localhost:3001',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'access-control-request-headers': 'authorization,content-type',
  accept: '*/*',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:55:06.223] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T13:55:06.224] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T13:55:06.234] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:55:06.245] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  'access-control-request-method': 'POST',
  origin: 'http://localhost:3001',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'access-control-request-headers': 'authorization,content-type',
  accept: '*/*',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:55:20.542] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:55:20.553] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  'access-control-request-method': 'POST',
  origin: 'http://localhost:3001',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'access-control-request-headers': 'authorization,content-type',
  accept: '*/*',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:56:02.520] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:56:02.530] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  'access-control-request-method': 'POST',
  origin: 'http://localhost:3001',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'access-control-request-headers': 'authorization,content-type',
  accept: '*/*',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:56:02.535] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  'content-length': '35',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  accept: 'application/json',
  origin: 'http://localhost:3001',
  authorization: '20191217_token',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'content-type': 'application/json',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:56:02.537] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:56:22.608] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:56:22.618] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  'access-control-request-method': 'POST',
  origin: 'http://localhost:3001',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'access-control-request-headers': 'authorization,content-type',
  accept: '*/*',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:56:22.632] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  'content-length': '35',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  accept: 'application/json',
  origin: 'http://localhost:3001',
  authorization: '20191217_token',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'content-type': 'application/json',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:56:22.633] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:57:20.306] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:57:20.314] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  'access-control-request-method': 'POST',
  origin: 'http://localhost:3001',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'access-control-request-headers': 'authorization,content-type',
  accept: '*/*',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:57:20.319] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  'content-length': '35',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  accept: 'application/json',
  origin: 'http://localhost:3001',
  authorization: '20191217_token',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'content-type': 'application/json',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T13:57:20.321] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T13:57:28.963] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T13:57:28.973] [INFO] normal - authorization { host: '127.0.0.1:3333',
  connection: 'close',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  'access-control-request-method': 'POST',
  origin: 'http://localhost:3001',
  'user-agent':
   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
  'access-control-request-headers': 'authorization,content-type',
  accept: '*/*',
  referer: 'http://localhost:3001/',
  'accept-encoding': 'gzip, deflate',
  'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7' }
[2019-12-30T14:11:42.894] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:11:42.909] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:11:49.070] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:11:49.070] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:20:01.691] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:20:01.694] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:20:39.737] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:20:39.741] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:21:10.561] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:21:10.563] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:22:14.025] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:22:14.028] [INFO] normal - [login] response data: (userId) => {
  return new Promise((resolve, reject) => {
    const token = jwt.sign({
      _id: userId
    }, SIGN_KEY, {
      expiresIn: '1h'
    });
    resolve(token);
  });
}
[2019-12-30T14:23:25.961] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:23:25.964] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:23:52.671] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:23:52.673] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:26:41.180] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:26:41.184] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:27:36.379] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:27:36.382] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:28:03.471] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:28:03.474] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:29:24.619] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:29:24.622] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:29:38.307] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:29:38.309] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:35:34.741] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:35:34.744] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:36:19.944] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:36:19.947] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:36:19.949] [INFO] normal - [login] response token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOnsidXNlckNvZGUiOiJ0ZXN0X2NvZGUiLCJwYXNzd29yZCI6IjEyMzQ1NiJ9LCJpYXQiOjE1Nzc2ODc3NzksImV4cCI6MTU3NzY5MTM3OX0.0TL8c-xCAa6ToDcL4_wiMTsihO1wtEhhn8rUvSs2ATU
[2019-12-30T14:42:23.057] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:42:23.060] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:42:23.075] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:42:23.088] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:42:48.396] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:42:48.411] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:43:08.963] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:43:08.988] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:43:18.018] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:43:18.018] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:43:18.029] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:43:18.039] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:43:33.521] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:43:33.549] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:44:12.224] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:44:12.242] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:44:27.314] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:44:27.329] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:44:38.278] [INFO] normal - [logout] request body: { userId: '20191217' }
[2019-12-30T14:44:39.195] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T14:44:39.196] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T14:44:39.217] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:44:39.228] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T14:44:44.954] [INFO] normal - [org/switch] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T14:44:44.990] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T14:45:23.237] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T14:45:23.256] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T15:04:39.997] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:04:39.999] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:10:45.055] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:10:45.057] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:10:45.057] [INFO] normal - userCode test_code
[2019-12-30T15:11:00.246] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:11:00.248] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:11:00.249] [INFO] normal - userCode test_code
[2019-12-30T15:11:20.868] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:11:20.870] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:12:28.608] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:12:28.611] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:14:07.560] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:14:07.563] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:14:15.463] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:14:15.465] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:14:53.731] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:14:53.733] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:16:51.615] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:16:51.617] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:17:13.089] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:17:13.091] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:17:27.345] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:17:27.347] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:17:54.841] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:17:54.842] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:20:08.365] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:20:08.367] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:20:08.368] [ERROR] normal - ReferenceError: SIGN_KEY is not defined
    at exports.setToken (D:\projects\个人项目\学习并输出demo\cas-Gateway\server\verify\token_verify.js:11:8)
    at D:\projects\个人项目\学习并输出demo\cas-Gateway\server\routes\index.js:18:19
    at Layer.handle [as handle_request] (D:\projects\个人项目\学习并输出demo\cas-Gateway\node_modules\express\lib\router\layer.js:95:5)
    at next (D:\projects\个人项目\学习并输出demo\cas-Gateway\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (D:\projects\个人项目\学习并输出demo\cas-Gateway\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (D:\projects\个人项目\学习并输出demo\cas-Gateway\node_modules\express\lib\router\layer.js:95:5)
    at D:\projects\个人项目\学习并输出demo\cas-Gateway\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (D:\projects\个人项目\学习并输出demo\cas-Gateway\node_modules\express\lib\router\index.js:335:12)
    at next (D:\projects\个人项目\学习并输出demo\cas-Gateway\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (D:\projects\个人项目\学习并输出demo\cas-Gateway\node_modules\express\lib\router\index.js:174:3)
[2019-12-30T15:21:03.602] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:21:03.604] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:21:03.629] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:21:03.641] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:21:09.428] [INFO] normal - [logout] request body: { userId: '20191217' }
[2019-12-30T15:21:11.075] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:21:11.075] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:21:11.088] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:21:11.109] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:24:06.673] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:24:06.675] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:24:06.694] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:24:06.707] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:24:56.870] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:24:56.885] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:27:18.806] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:27:18.809] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:27:18.830] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:27:18.844] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:28:33.896] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:28:33.898] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:28:33.922] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:28:33.933] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:32:50.102] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:32:50.104] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:32:50.124] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:32:50.148] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:34:34.651] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:34:34.653] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:34:34.669] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:34:34.680] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:35:22.795] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:35:22.797] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:35:22.813] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:35:22.825] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:38:36.227] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:38:36.227] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:38:36.238] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:38:36.249] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:38:58.015] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:38:58.015] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:38:58.025] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:38:58.046] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:39:35.640] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:39:35.641] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:39:35.665] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:39:35.680] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:39:57.735] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:39:57.737] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:39:57.760] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:39:57.775] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:41:00.984] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:41:00.986] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:41:01.015] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:41:01.029] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:42:29.777] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:42:29.780] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:42:29.798] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:42:29.831] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:42:32.762] [INFO] normal - [org/switch] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T15:42:32.776] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T15:44:13.765] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:44:13.766] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:44:13.778] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:44:13.789] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:44:45.545] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:44:45.546] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:44:45.571] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:44:45.583] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:45:40.851] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:45:40.851] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:45:40.864] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:45:40.878] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:46:39.549] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:46:39.550] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:46:39.573] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:46:39.585] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:48:36.637] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:48:36.637] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:48:36.648] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:48:36.660] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:53:34.326] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:53:34.326] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:53:34.336] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:53:34.356] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:54:48.439] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:54:48.441] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:54:48.466] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:54:48.477] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:55:43.449] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:55:43.450] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:55:43.463] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:55:43.482] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:56:21.999] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:56:21.999] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:56:22.009] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:56:22.021] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T15:57:04.611] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T15:57:04.612] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T15:57:04.631] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T15:57:04.641] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:01:15.370] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:01:15.371] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:01:15.381] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:01:15.393] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:02:31.938] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:02:31.938] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:02:31.962] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:02:31.977] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:03:12.003] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:03:12.003] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:03:12.028] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:03:12.052] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:04:27.431] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:04:27.432] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:04:27.446] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:04:27.468] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:04:53.068] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:04:53.069] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:04:53.084] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:04:53.113] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:05:35.141] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:05:35.142] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:05:35.152] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:05:35.174] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:06:17.403] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:06:17.404] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:06:17.417] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:06:17.439] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:07:13.258] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:07:13.259] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:07:13.269] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:07:13.287] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:08:11.089] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:08:11.089] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:08:11.101] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:08:11.115] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:12:46.620] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:12:46.620] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:12:46.639] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:12:46.654] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:15:02.062] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:15:02.063] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:15:02.072] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:15:02.085] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:16:02.498] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:16:02.499] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:16:02.508] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:16:02.519] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:16:06.692] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:16:06.708] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:16:42.359] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:16:42.359] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:16:42.369] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:16:42.381] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:17:39.954] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:17:51.809] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:18:05.182] [INFO] normal - [login] request body { userCode: 'test_code', password: '123456' }
[2019-12-30T16:18:05.183] [INFO] normal - [login] response data: { token: '20191217_token', userId: 20191217, orgId: 2019001 }
[2019-12-30T16:18:05.218] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:18:05.231] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:18:12.595] [INFO] normal - [org/switch] request body: { userId: 20191217, orgId: 2019002 }
[2019-12-30T16:18:19.208] [INFO] normal - [org/switch] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:18:26.763] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:19:06.359] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:19:20.028] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:20:55.540] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:21:48.154] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:21:48.157] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:21:48.168] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:21:48.171] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:22:01.581] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:22:01.585] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:22:01.600] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:22:01.603] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:22:35.843] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:22:36.323] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:22:36.335] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:23:18.081] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:23:18.087] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:23:18.107] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:23:18.109] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:23:34.486] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:23:34.488] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:23:34.510] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:23:34.513] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:24:01.044] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:24:01.046] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:24:01.056] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:24:01.058] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:28:32.133] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:28:33.119] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:28:33.132] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:29:11.836] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:29:28.707] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:30:17.202] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:30:23.238] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:31:10.860] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:31:14.260] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:31:14.272] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:31:18.785] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:31:24.759] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:31:46.207] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:31:55.685] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:02.515] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:10.830] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:10.847] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:10.858] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:10.873] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:32:17.006] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:17.014] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:17.031] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:17.033] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:32:25.777] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:25.861] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:25.871] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:32:58.359] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:58.443] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:32:58.456] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
[2019-12-30T16:33:04.607] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:33:04.698] [INFO] normal - [user/info] request body: { userId: 20191217 }
[2019-12-30T16:33:04.709] [INFO] normal - [menu] request body: { userId: 20191217, orgId: 2019001 }
